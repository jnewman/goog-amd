/**
 * @license goog-amd 0.4.0 https://github.com/jnewman/goog-amd/blob/master/LICENSE.txt
 * Build time: 2013-06-29P18:06:40
 */
;define(function(global){"use strict";return function(){var SUPPORTED=["Dojo","RequireJS"],aProto=Array.prototype,slice=aProto.slice,isFunction=function(a){return"function"==typeof a},bind=function(a,b,c){return c=slice.call(arguments,2),function(){return a.apply(b||null,c.concat(slice.call(arguments,0)))}},googLoaded=!1,plugin={load:function(a,b,c,d){var e=bind(this._fetch,this,b,c),f=bind(this._getParams,this,a),g=!!d;g&&d.isBuild?c({}):g?e(f(d)):this._getConfigThenFetch(b,e,f)},_getConfigThenFetch:function(a,b,c){try{a(["dojo/_base/config"],bind(function(a){b(c(a.goog?a:{}))},this))}catch(d){throw new Error("Unknown loader, should be one of:"+SUPPORTED.join(","))}},_getParams:function(a,b){var c=null;return/^[^:,"]+$/i.test(a)?(c=b.goog[a],c.moduleName||(c.moduleName=c.name||a)):c=this._parse(a),c},_getPart:function(a,b,c){var d,e=a.split(/(:|,)/);return this._contains(e,b)?(d=e[this._indexOf(e,b)+2],this._jsonParse(d)):"undefined"!==c?c:null},_parse:function(a){var b=bind(this._getPart,this,a);return{moduleName:b("moduleName",b("name")),version:b("version"),settings:{language:b("language","eng"),nocss:b("nocss",!0),packages:b("packages",[]),other_params:b("other_params",{})}}},_fetch:function(a,b,c){var d=bind(this._googLoad,this,c,b);googLoaded?d():a(["https://www.google.com/jsapi"],d)},_googLoad:function(a,b){google.load(a.moduleName,a.version,this._extend(a.settings,{callback:function(){b(global.google[a.moduleName])}}))},_bind:bind,_contains:function(a,b){for(var c=slice.call(arguments,1),d=0,e=c.length;e>d;++d)if(-1===this._indexOf(a,b))return!1;return!0},_extend:function(a,b){if(a=a||{},!b)return a;for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a},_indexOf:function(a,b){if("string"==typeof a)return a.indexOf(b);if(isFunction(aProto.indexOf))return aProto.indexOf.call(a,b);for(var c=0,d=a.length;d>c;++c)if(a[c]===b)return c;return-1},_isFunction:isFunction,_jsonParse:"undefined"!=typeof JSON&&isFunction(JSON.parse)?bind(JSON.parse,JSON):function(json){return eval("("+json+")")}};return plugin.load=bind(plugin.load,plugin),plugin}}(this));